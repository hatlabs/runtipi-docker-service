#!/usr/bin/env bash
#
# usage: ./run command [argument ...]
#
# Commands used during development / CI.
#
# See https://death.andgravity.com/run-sh
# for an explanation of how it works and why it's useful.

# First, set up the environment.
# (Check the notes at the end when changing this.)

set -o nounset
set -o pipefail
set -o errexit

# Enable this to echo commands as they are executed.
#set -o xtrace

# Change the current directory to the project root.
PROJECT_ROOT=${0%/*}
if [[ $0 != $PROJECT_ROOT && $PROJECT_ROOT != "" ]]; then
  cd "$PROJECT_ROOT"
fi
readonly PROJECT_ROOT=$(pwd)

# Store the absolute path to this script (useful for recursion).
readonly SCRIPT="$PROJECT_ROOT/$(basename "$0")"

################################################################################
# Core Commands

function release:version {
  #@ Show current project version
  #@ Category: Core
  cat VERSION
}

################################################################################
# Package Management Commands

function package:deb {
  #@ Build Debian package
  #@ Category: Package Management
  echo "üèóÔ∏è Building Debian package..."
  package:deb:only
}

function package:deb:only {
  #@ Build Debian package from existing artifacts (internal)
  #@ Category: Package Management
  echo "üì¶ Creating Debian package..."

  export DEBEMAIL="info@hatlabs.fi"
  export DEBFULLNAME="Hat Labs CI"
  export PACKAGE_VERSION=$(release:version | tr -d 'v')

  # Create a new changelog entry
  dch --newversion "$PACKAGE_VERSION" \
      --distribution trixie \
      --force-distribution \
      "Automated release $PACKAGE_VERSION. See GitHub for details."

  dpkg-buildpackage -us -uc -b

  echo "‚úÖ Debian package built successfully"
}

function package:deb:only:ci {
  #@ Build Debian package for CI (bypasses environment setup)
  #@ Category: Package Management
  echo "üì¶ Creating Debian package (CI mode)..."

  export DEBEMAIL="info@hatlabs.fi"
  export DEBFULLNAME="Hat Labs CI"
  export PACKAGE_VERSION=$(release:version | tr -d 'v')

  # CI mode: Use existing changelog entry
  echo "üìã Using existing debian/changelog entry for version $PACKAGE_VERSION"

  dpkg-buildpackage -us -uc -b

  # Move the .deb file from parent directory into build directory
  mv ../*.deb . 2>/dev/null || true

  echo "‚úÖ Debian package built successfully (CI mode)"
}

function package:deb:docker {
  #@ Build Debian package using Docker container
  #@ Category: Package Management
  echo "üê≥ Building Debian package using Docker..."

  export DIR_NAME=$(basename "$PWD")
  docker compose -f docker/docker-compose.debtools.yml run --rm debtools ./run package:deb:only

  echo "‚úÖ Docker-based Debian package built successfully"
}

function package:deb:docker:ci {
  #@ Build Debian package using Docker container (CI mode)
  #@ Category: Package Management
  echo "üê≥ Building Debian package using Docker (CI mode)..."

  export DIR_NAME=$(basename "$PWD")

  # Run as root in CI to avoid permission issues with mounted volumes
  docker compose -f docker/docker-compose.debtools.yml run --rm --user root debtools ./run package:deb:only:ci

  echo "‚úÖ Docker-based Debian package built successfully (CI mode)"
}

function package:docker:build {
  #@ Build Docker tools image
  #@ Category: Package Management
  export DIR_NAME=$(basename "$PWD")
  docker compose -f docker/docker-compose.debtools.yml build debtools "$@"
}

################################################################################
# Testing/CI Commands

function test:package:workflow {
  #@ Test the package build workflow locally using act
  #@ Category: Testing/CI
  echo "üß™ Testing package build workflow with act..."

  if ! command -v act &> /dev/null; then
    echo "‚ùå Error: 'act' is not installed. Install with: brew install act"
    return 1
  fi

  act push --container-architecture linux/arm64

  echo "‚úÖ Package workflow test completed"
}

################################################################################
# Help System

function help {
  #@ Show this help message
  #@ Category: Core
  echo "Available commands:"
  echo ""

  # Extract function definitions and their help comments
  awk '/^function / {
    fname = $2
    sub(/[({].*/, "", fname)
    getline
    if ($0 ~ /#@/) {
      desc = $0
      sub(/.*#@ /, "", desc)
      sub(/ *$/, "", desc)
      getline
      if ($0 ~ /#@ Category:/) {
        cat = $0
        sub(/.*Category: /, "", cat)
        sub(/ *$/, "", cat)
        if (!seen[cat]++) categories[++cat_count] = cat
        commands[cat, ++cmd_count[cat]] = fname
        descriptions[cat, cmd_count[cat]] = desc
      }
    }
  }
  END {
    for (i = 1; i <= cat_count; i++) {
      cat = categories[i]
      print "\n" cat ":"
      for (j = 1; j <= cmd_count[cat]; j++) {
        printf "  %-30s %s\n", commands[cat, j], descriptions[cat, j]
      }
    }
  }' "$0"

  echo ""
  echo "Usage: ./run <command> [arguments...]"
}

################################################################################
# Commands end.

# Dispatch to command. A simpler version would be just "$@" (with the quotes!).

TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"

# Some dev notes for this script.
#
# The commands *require*:
#
# * The current working directory is the project root.
# * The shell options and globals are set as they are.
#
# Inspired by the following:
#  - https://death.andgravity.com/run-sh
#  - http://www.oilshell.org/blog/2020/02/good-parts-sketch.html
#  - https://www.youtube.com/watch?v=SdmYd5hJISM&t=7s
